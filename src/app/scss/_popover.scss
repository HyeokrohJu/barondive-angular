$font-family-sans-serif: Roboto, 'NanumSquare', 'Noto Sans', 'Helvetica Neue', sans-serif !default;
$font-family-base: $font-family-sans-serif !default;
$font-size-base: 1rem !default; // Assumes the browser default, typically `16px`
$font-size-sm: $font-size-base * 0.875 !default;
$white: #fff !default;
$black: #000 !default;
$border-radius: 0.25rem !default;
$line-height-base: 1.5 !default;
$font-weight-normal: 400 !default;

// Tooltips
$zindex-tooltip: 90000 !default;
$tooltip-font-size: $font-size-sm !default;
$tooltip-max-width: 800px !default;
$tooltip-color: $white !default;
$tooltip-bg: $black !default;
$tooltip-border-radius: $border-radius !default;
$tooltip-opacity: 0.9 !default;
$tooltip-padding-y: 0.25rem !default;
$tooltip-padding-x: 0.5rem !default;
$tooltip-margin: 0 !default;

$tooltip-arrow-width: 0.8rem !default;
$tooltip-arrow-height: 0.4rem !default;
$tooltip-arrow-color: $tooltip-bg !default;

// Form tooltips must come after regular tooltips
$form-feedback-tooltip-padding-y: $tooltip-padding-y !default;
$form-feedback-tooltip-padding-x: $tooltip-padding-x !default;
$form-feedback-tooltip-font-size: $tooltip-font-size !default;
$form-feedback-tooltip-line-height: $line-height-base !default;
$form-feedback-tooltip-opacity: $tooltip-opacity !default;
$form-feedback-tooltip-border-radius: $tooltip-border-radius !default;

$border-radius: 0.25rem !default;
$enable-rounded: true !default;
$enable-shadows: false !default;

@mixin reset-text() {
  font-family: $font-family-base;
  // We deliberately do NOT reset font-size or word-wrap.
  font-style: normal;
  font-weight: $font-weight-normal;
  line-height: $line-height-base;
  text-align: left; // Fallback for where `start` is not supported
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
}

// stylelint-disable property-blacklist
// Single side border-radius

// Helper function to replace negative values with 0
@function valid-radius($radius) {
  $return: ();

  @each $value in $radius {
    @if type-of($value) ==number {
      $return: append($return, max($value, 0));
    } @else {
      $return: append($return, $value);
    }
  }

  @return $return;
}

@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
  @if $enable-rounded {
    border-radius: valid-radius($radius);
  } @else if $fallback-border-radius !=false {
    border-radius: $fallback-border-radius;
  }
}

@mixin border-top-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-top-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
  }
}

@mixin border-top-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-right-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-left-radius($radius) {
  @if $enable-rounded {
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin box-shadow($shadow...) {
  @if $enable-shadows {
    $result: ();

    @if (length($shadow) ==1) {
      // We can pass `@include box-shadow(none);`
      $result: $shadow;
    } @else {
      // Filter to avoid invalid properties for example `box-shadow: none, 1px 1px black;`
      @for $i from 1 through length($shadow) {
        @if nth($shadow, $i) != 'none' {
          $result: append($result, nth($shadow, $i), 'comma');
        }
      }
    }

    @if (length($result) > 0) {
      box-shadow: $result;
    }
  }
}

// Base class
.tooltip {
  position: absolute;
  z-index: $zindex-tooltip;
  display: block;
  margin: $tooltip-margin;
  // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
  // So reset our font and text properties to avoid inheriting weird values.
  @include reset-text();
  // Allow breaking very long words so they don't overflow the tooltip's bounds
  word-wrap: break-word;
  opacity: 0;

  &.show {
    opacity: $tooltip-opacity;
  }

  .arrow {
    position: absolute;
    display: block;
    width: $tooltip-arrow-width;
    height: $tooltip-arrow-height;

    &::before {
      position: absolute;
      content: '';
      border-color: transparent;
      border-style: solid;
    }
  }
}

.bs-tooltip-top {
  padding: $tooltip-arrow-height 0;

  .arrow {
    bottom: 0;

    &::before {
      top: 0;
      border-width: $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
      border-top-color: $tooltip-arrow-color;
    }
  }
}

.bs-tooltip-right {
  padding: 0 $tooltip-arrow-height;

  .arrow {
    left: 0;
    width: $tooltip-arrow-height;
    height: $tooltip-arrow-width;

    &::before {
      right: 0;
      border-width: ($tooltip-arrow-width / 2) $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
      border-right-color: $tooltip-arrow-color;
    }
  }
}

.bs-tooltip-bottom {
  padding: $tooltip-arrow-height 0;

  .arrow {
    top: 0;

    &::before {
      bottom: 0;
      border-width: 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
      border-bottom-color: $tooltip-arrow-color;
    }
  }
}

.bs-tooltip-left {
  padding: 0 $tooltip-arrow-height;

  .arrow {
    right: 0;
    width: $tooltip-arrow-height;
    height: $tooltip-arrow-width;

    &::before {
      left: 0;
      border-width: ($tooltip-arrow-width / 2) 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
      border-left-color: $tooltip-arrow-color;
    }
  }
}

.bs-tooltip-auto {
  &[x-placement^='top'] {
    @extend .bs-tooltip-top;
  }

  &[x-placement^='right'] {
    @extend .bs-tooltip-right;
  }

  &[x-placement^='bottom'] {
    @extend .bs-tooltip-bottom;
  }

  &[x-placement^='left'] {
    @extend .bs-tooltip-left;
  }
}

// Wrapper for the tooltip content
.tooltip-inner {
  max-width: $tooltip-max-width;
  padding: $tooltip-padding-y $tooltip-padding-x;
  color: $tooltip-color;
  text-align: center;
  background-color: $tooltip-bg;
  @include border-radius($tooltip-border-radius);
}

$gray-900: #212529 !default;
$body-color: $gray-900 !default;
$border-width: 0px !default;
$zindex-popover: 90600 !default;
$popover-max-width: 800px !default;
$popover-font-size: $font-size-sm !default;
$popover-bg: $black !default;
$popover-border-width: $border-width !default;
$popover-border-radius: $border-radius !default;
$popover-box-shadow: 0 0.25rem 0.5rem rgba($black, 0.2) !default;
$popover-border-color: rgba($black, 0.2) !default;
$headings-color: null !default;

$popover-arrow-width: 1rem !default;
$popover-arrow-height: 0.5rem !default;
$popover-arrow-color: $popover-bg !default;

$popover-arrow-outer-color: fade-in($popover-border-color, 0.05) !default;

$popover-header-bg: darken($popover-bg, 3%) !default;
$popover-header-color: $headings-color !default;
$popover-header-padding-y: 0.5rem !default;
$popover-header-padding-x: 0.75rem !default;
$popover-inner-border-radius: subtract($popover-border-radius, $popover-border-width) !default;
$popover-body-color: $body-color !default;
$popover-body-padding-y: $popover-header-padding-y !default;
$popover-body-padding-x: $popover-header-padding-x !default;

@mixin popover($color-popover: #fff, $bg-popover: #212529, $border-popover: #eee) {
  position: absolute;
  z-index: $zindex-popover;
  display: block;
  margin: $tooltip-margin;
  // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
  // So reset our font and text properties to avoid inheriting weird values.
  @include reset-text();
  // Allow breaking very long words so they don't overflow the popover's bounds
  word-wrap: break-word;

  & .arrow {
    position: absolute;
    display: block;
    width: $tooltip-arrow-width;
    height: $tooltip-arrow-height;

    &::before {
      position: absolute;
      content: '';
      border-color: transparent;
      border-style: solid;
    }
  }

  & .popover-header {
    padding: $popover-header-padding-y $popover-header-padding-x;
    margin-bottom: 0; // Reset the default from Reboot
    color: $color-popover;
    background-color: $bg-popover;
    border-bottom: $popover-border-width solid darken($popover-header-bg, 5%);
    @include border-top-radius($popover-inner-border-radius);

    &:empty {
      display: none;
    }
  }

  & .popover-body {
    max-width: $tooltip-max-width;
    // padding: $tooltip-padding-y $tooltip-padding-x;
    color: $color-popover;
    text-align: center;
    background-color: $bg-popover;
    border: 1px solid $border-popover;
    @include border-radius($tooltip-border-radius);
  }
}

@mixin popover-pos-top($color-popover: #fff, $bg-popover: #212529, $border-popover: #eee) {
  padding: $tooltip-arrow-height 0;

  .arrow {
    bottom: 0;

    @if $bg-popover == #212529 {
      &::before {
        top: 0;
        border-width: $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
        border-top-color: $bg-popover;
      }
    } @else {
      &::before {
        top: -5px;
        border-width: 1px;
        width: 8px;
        height: 8px;
        border-bottom-color: $border-popover;
        border-right-color: $border-popover;
        background: $bg-popover;
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
      }
    }
  }
}

@mixin popover-pos-right($color-popover: #fff, $bg-popover: #212529, $border-popover: #eee) {
  padding: 0 $tooltip-arrow-height;

  .arrow {
    left: 0;
    width: $tooltip-arrow-height;
    height: $tooltip-arrow-width;

    @if $bg-popover == #212529 {
      &::before {
        right: 0;
        border-width: ($tooltip-arrow-width / 2) $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
        border-right-color: $bg-popover;
      }
    } @else {
      &::before {
        right: -5px;
        border-width: 1px;
        width: 8px;
        height: 8px;
        border-bottom-color: $border-popover;
        border-right-color: $border-popover;
        background: $bg-popover;
        transform: rotate(135deg);
        -webkit-transform: rotate(135deg);
      }
    }
  }
}

@mixin popover-pos-bottom($color-popover: #fff, $bg-popover: #212529, $border-popover: #eee) {
  padding: $tooltip-arrow-height 0;

  .arrow {
    top: 0;

    @if $bg-popover == #212529 {
      &::before {
        bottom: 0;
        border-width: 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
        border-bottom-color: $bg-popover;
      }
    } @else {
      &::before {
        bottom: -5px;
        border-width: 1px;
        width: 8px;
        height: 8px;
        border-bottom-color: $border-popover;
        border-right-color: $border-popover;
        background: $bg-popover;
        transform: rotate(225deg);
        -webkit-transform: rotate(225deg);
      }
    }
  }
}

@mixin popover-pos-left($color-popover: #fff, $bg-popover: #212529, $border-popover: #eee) {
  padding: 0 $tooltip-arrow-height;

  .arrow {
    right: 0;
    width: $tooltip-arrow-height;
    height: $tooltip-arrow-width;

    @if $bg-popover == #212529 {
      &::before {
        left: 0;
        border-width: ($tooltip-arrow-width / 2) 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
        border-left-color: $bg-popover;
      }
    } @else {
      &::before {
        left: -5px;
        border-width: 1px;
        width: 8px;
        height: 8px;
        border-bottom-color: $border-popover;
        border-right-color: $border-popover;
        background: $bg-popover;
        transform: rotate(315deg);
        -webkit-transform: rotate(315deg);
      }
    }
  }
}

.popover {
  @include popover();
}

.bs-popover-top {
  @include popover-pos-top();
}

.bs-popover-right {
  @include popover-pos-right();
}

.bs-popover-bottom {
  @include popover-pos-bottom();
}

.bs-popover-left {
  @include popover-pos-left();
}

.bs-popover-auto {
  &[x-placement^='top'] {
    @extend .bs-popover-top;
  }

  &[x-placement^='right'] {
    @extend .bs-popover-right;
  }

  &[x-placement^='bottom'] {
    @extend .bs-popover-bottom;
  }

  &[x-placement^='left'] {
    @extend .bs-popover-left;
  }
}

.popover.popover-white {
  @include popover(#212529, #fff);
}

.bs-popover-top.popover-white {
  @include popover-pos-top(#212529, #fff);
}

.bs-popover-right.popover-white {
  @include popover-pos-right(#212529, #fff);
}

.bs-popover-bottom.popover-white {
  @include popover-pos-bottom(#212529, #fff);
}

.bs-popover-left.popover-white {
  @include popover-pos-left(#212529, #fff);
}

.bs-popover-auto.popover-white {
  &[x-placement^='top'] {
    @include popover-pos-top(#212529, #fff);
  }

  &[x-placement^='right'] {
    @include popover-pos-right(#212529, #fff);
  }

  &[x-placement^='bottom'] {
    @include popover-pos-bottom(#212529, #fff);
  }

  &[x-placement^='left'] {
    @include popover-pos-left(#212529, #fff);
  }
}
